import com.sie.project.models.*;
import com.sie.project.enums.*;
import java.util.Arrays;
import java.util.List
import java.time.Instant
import java.time.Duration
import java.util.Date
import java.text.SimpleDateFormat
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.time.LocalDate
import java.time.format.ResolverStyle
import java.time.format.DateTimeParseException
import java.util.stream.Stream
import java.util.stream.Collectors
import java.time.temporal.ChronoUnit
import java.time.ZoneOffset;

// R1
rule "Get career status by monthly income interval"
    when
        targetAudience:TargetAudience(monthlyIncomeInterval==MonthlyIncomeInterval.UNDER_1000)
    then
        System.out.println("\n=====RULE 1=====");
        targetAudience.setCareerStatus(CareerStatus.UNEMPLOYED);
        System.out.println("Deoarece target audience are salariul lunar in intervalul "
            + MonthlyIncomeInterval.UNDER_1000.getValue()
            + " vom presupune ca statutul profesional este " + CareerStatus.UNEMPLOYED.getValue() + ".");
end

// R2
rule "Get career status by age interval"
    when
        targetAudience:TargetAudience(ageInterval==AgeInterval.UNDER_18)
    then
        System.out.println("\n=====RULE 2=====");
        targetAudience.setCareerStatus(CareerStatus.UNEMPLOYED);
        System.out.println("Deoarece target audience are varsta cuprinsa in intervalul "
            + AgeInterval.UNDER_18.getValue()
            + " vom presupune ca statutul profesional este " + CareerStatus.UNEMPLOYED.getValue() + ".");
end

// R3
rule "Change minimum numbers of posts when number of followers is in certain interval"
    when
        socialMediaProfile:SocialMediaProfile(platform==SocialMediaPlatform.FACEBOOK)
    then
        System.out.println("\n=====RULE 3=====");
        Integer followersCount = socialMediaProfile.getFollowersCount();
        if(followersCount < 100) {
            socialMediaProfile.setMinimumPostsCountPerMonth(65);
        }
        else if(followersCount > 100 && followersCount < 1000) {
            socialMediaProfile.setMinimumPostsCountPerMonth(45);
        }
        else if(followersCount > 1000) {
            socialMediaProfile.setMinimumPostsCountPerMonth(30);
        }
        System.out.printf("Profilul %s de pe platforma %s are %s de urmaritori, deci va avea %s de postari lunar.%n",
        socialMediaProfile.getName(), socialMediaProfile.getPlatform(), socialMediaProfile.getFollowersCount(), socialMediaProfile.getMinimumPostsCountPerMonth());
end

// R4
rule "Change name depending on the media platform"
    when
        socialMediaProfile:SocialMediaProfile(platform==SocialMediaPlatform.INSTAGRAM)
    then
        System.out.println("\n=====RULE 4=====");
        var currentName = socialMediaProfile.getName();
        var platform = socialMediaProfile.getPlatform();

        if(platform.equals(SocialMediaPlatform.INSTAGRAM)) {
            socialMediaProfile.setName("IG" + currentName);
        }
        else if(platform.equals(SocialMediaPlatform.FACEBOOK)) {
            socialMediaProfile.setName("FB" + currentName);
        }
        else if(platform.equals(SocialMediaPlatform.TWITTER)) {
            socialMediaProfile.setName("TW" + currentName);
        }
        else if(platform.equals(SocialMediaPlatform.TIKTOK)) {
            socialMediaProfile.setName("TT" + currentName);
        }

        System.out.printf("Profilul %s este pe platforma %s, deci i se va actualiza numele la %s.%n",
        currentName, socialMediaProfile.getPlatform(), socialMediaProfile.getName());
end

// R5
rule "Promote different products depending on platform"
    when
        socialMediaProfile:SocialMediaProfile(platform == SocialMediaPlatform.INSTAGRAM)
        promotedProduct:PromotedProduct(name == "NumeProdusPromovat")
        promoter:Promoter(socialMediaProfiles == List.of(socialMediaProfile))
    then
        System.out.println("\n=====RULE 5=====");
        var platform = socialMediaProfile.getPlatform();
        if(platform.equals(SocialMediaPlatform.INSTAGRAM)) {
            promotedProduct.setCategory(ProductCategory.FITNESS);
            promoter.setPromotedProductList(List.of(promotedProduct));
        }
        else if(platform.equals(SocialMediaPlatform.FACEBOOK)) {
            promotedProduct.setCategory(ProductCategory.COSMETIC);
            promoter.setPromotedProductList(List.of(promotedProduct));
        }
        else if(platform.equals(SocialMediaPlatform.TWITTER)) {
            promotedProduct.setCategory(ProductCategory.ELECTRONIC);
            promoter.setPromotedProductList(List.of(promotedProduct));
        }
        else if(platform.equals(SocialMediaPlatform.TIKTOK)) {
            promotedProduct.setCategory(ProductCategory.FASHION);
            promoter.setPromotedProductList(List.of(promotedProduct));
        }
        System.out.printf("Profilul %s este pe platforma %s, deci se va promova categoria %s.%n",
        socialMediaProfile.getName(), socialMediaProfile.getPlatform(), promotedProduct.getCategory());
end

// R6 daca expiration date e aroape de data curenta.. => discount mai mare
rule "If expiration date is in the next 30 days, increase discount by 25%"
    when
        promotedProduct:PromotedProduct(name == "NumeProdusPromovat");
    then
        System.out.println("\n=====RULE 6=====");

        var currentInstant = Instant.now();
        var duration = Duration.between(currentInstant, promotedProduct.getExpirationDate());

        if (duration.toDays() <= 30) {
            promotedProduct.setDiscount(0.25);
            Date expirationDate = Date.from(promotedProduct.getExpirationDate());
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

            System.out.printf("Deoarece produsul %s are data expirarii %s, se va folosi un discount de 25 la suta.%n",
            promotedProduct.getName(), formatter.format(expirationDate));
        }
end

// R7 - in functie de perioada campaniei facem reducere la anumite categorii de produse
rule "Making promotions on different categories depending on the period of time"
    when
        socialMediaProfile:SocialMediaProfile(platform == SocialMediaPlatform.TWITTER)
        promotedProduct:PromotedProduct(name == "Nutella")
        promoter:Promoter(socialMediaProfiles == List.of(socialMediaProfile))
    then
        System.out.println("\n=====RULE 7=====");
        var promotionStartDate = promoter.getPromotionStartDate();
        var promotionEndDate = promoter.getPromotionEndDate();

        var christmasStartDate = Instant.parse("2021-12-25T00:00:00.00Z");
        var christmasEndDate = Instant.parse("2022-01-01T00:00:00.00Z");

        var summerSaleStartDate = Instant.parse("2021-06-01T00:00:00.00Z");
        var summerSaleEndDate = Instant.parse("2021-07-01T00:00:00.00Z");

        if (promotionStartDate.isAfter(christmasStartDate) && promotionEndDate.isBefore(christmasEndDate)){
            promotedProduct.setCategory(ProductCategory.COSMETIC);
            promotedProduct.setDiscount(0.30);
        }
        else if (promotionStartDate.isAfter(summerSaleStartDate) && promotionEndDate.isBefore(summerSaleEndDate)){
            promotedProduct.setCategory(ProductCategory.ELECTRONIC);
            promotedProduct.setDiscount(0.15);
        }

        Date formattedStartDate = Date.from(promotionStartDate);
        Date formattedEndDate = Date.from(promotionEndDate);
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        System.out.printf("Deoarece campania este in perioada %s - %s, produsele din categoria %s vor beneficia de un discount de %.1f la suta.%n",
        formatter.format(formattedStartDate), formatter.format(formattedEndDate), promotedProduct.getCategory(), promotedProduct.getDiscount() * 100);
end


// R8 updatam numele cand este expirat -> for future actions
rule "Update name of a product if expiration date is exceeded"
    when
        promotedProduct:PromotedProduct(expirationDate == Instant.parse("2021-10-23T00:00:00.00Z"));
    then
        System.out.println("\n=====RULE 8=====");

        var currentName = promotedProduct.getName();

        var currentInstant = Instant.now();
        var currentExpirationDate = promotedProduct.getExpirationDate();

        Date formattedExpirationDate = Date.from(currentExpirationDate);
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        if (currentExpirationDate.isBefore(currentInstant)){
            promotedProduct.setName("EXPIRAT(" + formatter.format(formattedExpirationDate) +") " + currentName);
        }

        System.out.printf("Deoarece produsul %s este expirat din data %s, i se va actualiza numele la %s.%n",
        currentName, formatter.format(formattedExpirationDate), promotedProduct.getName());
end

// R9 reduceri in functie de perioada lunii cand incepe promotia
rule "Different discounts based on the period of the month"
    when
        promotedProduct:PromotedProduct(name == "ProdusNou")
        promoter:Promoter(promotedProductList == List.of(promotedProduct))
    then
        System.out.println("\n=====RULE 9=====");

        var promotionStartDate = promoter.getPromotionStartDate();
        var dayFromPromotionStartDate = promotionStartDate.atZone(ZoneId.systemDefault()).getDayOfMonth();

        var firstInterval = Instant.parse("2021-01-01T00:00:00.00Z").atZone(ZoneId.systemDefault()).getDayOfMonth();
        var secondInterval = Instant.parse("2021-01-10T00:00:00.00Z").atZone(ZoneId.systemDefault()).getDayOfMonth();
        var thirdInterval = Instant.parse("2021-01-20T00:00:00.00Z").atZone(ZoneId.systemDefault()).getDayOfMonth();

        if (dayFromPromotionStartDate >= firstInterval && dayFromPromotionStartDate <= secondInterval){
            promotedProduct.setDiscount(0.12);
        }else if(dayFromPromotionStartDate >= secondInterval && dayFromPromotionStartDate <= thirdInterval){
            promotedProduct.setDiscount(0.20);
        }else {
            promotedProduct.setDiscount(0.35);
        }

        System.out.printf("Deoarece promotia incepe in ziua %d din luna, produsul cu numele %s va fi redus cu %.1f la suta.%n",
        dayFromPromotionStartDate, promotedProduct.getName(), promotedProduct.getDiscount() * 100);
end

// R10 daca e student -> reduceri mai mari
rule "If student, receive bigger discount"
    when
        targetAudience:TargetAudience(careerStatus == CareerStatus.STUDENT)
        promotedProduct:PromotedProduct(name == "Laptop")
        marketingStrategy:MarketingStrategy(targetAudience == targetAudience)
    then
        System.out.println("\n=====RULE 10=====");

        if (targetAudience.getCareerStatus().equals(CareerStatus.STUDENT)){
            promotedProduct.setDiscount(0.15);
            System.out.printf("Produsul cu numele %s va fi redus cu %.1f la suta pentru categoria %s.%n",
            promotedProduct.getName(), promotedProduct.getDiscount() * 100, targetAudience.getCareerStatus());
        }
end

// R11 daca e sub o anumita varsta -> reduceri mai mari
rule "If under 18, receive bigger discount"
    when
        targetAudience:TargetAudience(ageInterval == AgeInterval.UNDER_18)
        promotedProduct:PromotedProduct(name == "Smartphone")
        marketingStrategy:MarketingStrategy(targetAudience == targetAudience)
    then
        System.out.println("\n=====RULE 11=====");

        if (targetAudience.getAgeInterval().equals(AgeInterval.UNDER_18)){
            promotedProduct.setDiscount(0.20);
            System.out.printf("Produsul cu numele %s va fi redus cu %.1f la suta pentru persoanele sub 18 ani.%n",
            promotedProduct.getName(), promotedProduct.getDiscount() * 100);
        }
end

// R12 in functie de nr de followeri -> nr de promoteri
rule "Depending on the number of followers, set maximum number of promoters"
    when
        socialMediaProfile:SocialMediaProfile(followersCount == 15000, platform == SocialMediaPlatform.TWITTER)
        marketingStrategy:MarketingStrategy(socialMediaProfiles == List.of(socialMediaProfile))
    then
        System.out.println("\n=====RULE 12=====");

        var currentFollowersNumber = socialMediaProfile.getFollowersCount();
        var neededNumberOfPromoters = currentFollowersNumber / 2500; // <- for each 2500 followers we add another promoter

        System.out.printf("Tinand cont ca avem %d de followeri pe platforma %s, avem nevoie de %d promoteri.%n",
        currentFollowersNumber, socialMediaProfile.getPlatform(), neededNumberOfPromoters);
end

// R13 in functie de platforma -> perioada maxima campanie -> TBD
rule "Depending on the social platform, set the period of campaign"
    when
        socialMediaProfile:SocialMediaProfile(platform == SocialMediaPlatform.TIKTOK)
        marketingStrategy:MarketingStrategy(socialMediaProfiles == List.of(socialMediaProfile))
    then
        System.out.println("\n=====RULE 13=====");

        if (socialMediaProfile.getPlatform().equals(SocialMediaPlatform.TIKTOK)){
            marketingStrategy.setCampaignStartDate(Instant.parse("2022-01-01T00:00:00.00Z"));
            marketingStrategy.setCampaignEndDate(Instant.parse("2022-03-01T00:00:00.00Z"));
        }

        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        System.out.printf("Deoarece platforma aleasa este %s, perioada campaniei va fi: %s - %s.%n",
        socialMediaProfile.getPlatform(),
        formatter.format(Date.from(marketingStrategy.getCampaignStartDate())),
        formatter.format(Date.from(marketingStrategy.getCampaignEndDate())));
end

// R14 verificare data campanie
function boolean isValidDate(MarketingStrategy ms){
    var startDate = ms.getCampaignStartDate();
    var endDate = ms.getCampaignEndDate();
    var today = Instant.now();

    if (endDate.isBefore(startDate)){
        return false;
    }
    else if(startDate.isBefore(today) || endDate.isBefore(today)){
        return false;
    }

    return true;
}

rule "Check valid campaign date"
    when
        marketingStrategy:MarketingStrategy(allocatedBudget == 123123)
    then
        System.out.println("\n=====RULE 14=====");

        var startDate = marketingStrategy.getCampaignStartDate();
        var endDate = marketingStrategy.getCampaignEndDate();

        if (isValidDate(marketingStrategy)){
            if (startDate.isAfter(Instant.parse("2021-12-01T00:00:00.00Z")) && endDate.isBefore(Instant.parse("2021-12-31T00:00:00.00Z"))){
                var targetAudienceWinter = new TargetAudience(AgeInterval.UNDER_18);
                marketingStrategy.setTargetAudience(targetAudienceWinter);

                System.out.printf("Deoarece campania e in timpul sarbatorilor de iarna, grupul tinta va fi %s.%n",
                targetAudienceWinter.getAgeInterval().getValue());
            }else if(startDate.isAfter(Instant.parse("2022-06-01T00:00:00.00Z")) && endDate.isBefore(Instant.parse("2022-09-31T00:00:00.00Z"))){
                var targetAudienceSummer = new TargetAudience(AgeInterval.BETWEEN_18_AND_30);
                marketingStrategy.setTargetAudience(targetAudienceSummer);

                System.out.printf("Deoarece campania e in timpul verii, grupul tinta va fi %s.%n",
                targetAudienceSummer.getAgeInterval().getValue());
            }
        }else{
            System.out.println("Data introdusa nu este valida");
        }
end

// R15
rule "Verify that marketing strategies are not overalapping in a company"
    when
        targetAudience:TargetAudience(ageInterval == AgeInterval.OLDER_THAN_50)
        marketingStrategy:MarketingStrategy(allocatedBudget == 101010, targetAudience == targetAudience)
        company:Company(marketingStrategies == List.of(marketingStrategy))
    then
        System.out.println("\n=====RULE 15=====");

        var newTargetAudience = new TargetAudience(AgeInterval.BETWEEN_30_AND_40);
        var newMarketingStrategy = new MarketingStrategy(newTargetAudience);

        var existingMarketingStrategies = company.getMarketingStrategies();

        if (existingMarketingStrategies.isEmpty()) {
            company.setMarketingStrategies(List.of(newMarketingStrategy));
        }

        if (!existingMarketingStrategies.isEmpty()) {
            var nrOfElements = existingMarketingStrategies.size();
            var lastElement = existingMarketingStrategies.get(nrOfElements - 1);

            if (lastElement.getTargetAudience().getAgeInterval().getValue().equals(newMarketingStrategy.getTargetAudience().getAgeInterval().getValue())){
                System.out.println("Exista deja un marketing strategy cu acelasi grup tinta, nu se poate crea altul");
            }
            else {
                var newMarketingStrategyList = List.of(newMarketingStrategy);
                var newMarketingStrategiesList = Stream.concat(existingMarketingStrategies.stream(), newMarketingStrategyList.stream()).collect(Collectors.toList());
                company.setMarketingStrategies(newMarketingStrategiesList);
                System.out.println("Strategia este diferita, deci a fost adaugata");
            }
        }
end

// R16
rule "Set number of giveaways based on the follower count"
    when
        socialMediaProfile:SocialMediaProfile(name == "PaginaDeFacebook", followersCount == 145000)
        marketingStrategy:MarketingStrategy(socialMediaProfiles == List.of(socialMediaProfile))
    then
        System.out.println("\n=====RULE 16=====");
        int numberOfGiveaways = 1;
        if (socialMediaProfile.getFollowersCount() < 1000) {
            marketingStrategy.setNumberOfGiveaways(numberOfGiveaways);
        } else if (socialMediaProfile.getFollowersCount() < 5000) {
            marketingStrategy.setNumberOfGiveaways(numberOfGiveaways);
        } else marketingStrategy.setNumberOfGiveaways(numberOfGiveaways);

        System.out.printf("Profilul de social media %s are %d followeri, deci se vor organiza %d giveaways pe pagina in decursul campaniei de marketing.%n",
            socialMediaProfile.getName(), socialMediaProfile.getFollowersCount(), numberOfGiveaways);
end

// R17
rule "Verify that promotion period is included in the campaign period"
    when
        promoter:Promoter(name == "CCC")
        marketingStrategy:MarketingStrategy(allocatedBudget == 55000)
    then
        System.out.println("\n=====RULE 17=====");
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        var promoterStartDate = promoter.getPromotionStartDate();
        var promoterEndDate = promoter.getPromotionEndDate();
        var strategyStartDate = marketingStrategy.getCampaignStartDate();
        var strategyEndDate = marketingStrategy.getCampaignEndDate();
        if(promoterStartDate.isAfter(strategyStartDate) && promoterEndDate.isBefore(strategyEndDate)) {
            System.out.printf("Perioada de promovare pentru promoter-ul %s (%s - %s) se incadreaza in perioada campaniei %s - %s.%n",
                promoter.getName(), formatter.format(Date.from(promoterStartDate)), formatter.format(Date.from(promoterEndDate)),
                formatter.format(Date.from(strategyStartDate)), formatter.format(Date.from(strategyEndDate)));
        }
end

// R18
rule "Compute allocated budget taking into consideration the social media platform"
    when
        socialMediaProfile:SocialMediaProfile(platform == SocialMediaPlatform.INSTAGRAM)
        marketingStrategy:MarketingStrategy(socialMediaProfiles == List.of(socialMediaProfile))
        company:Company(marketingStrategies == List.of(marketingStrategy))
    then
        System.out.println("\n=====RULE 18=====");
        var allocatedBudget = 1500; // operational costs
        switch(socialMediaProfile.getPlatform()) {
            case INSTAGRAM:
                allocatedBudget += 5000; break;
            case FACEBOOK:
                allocatedBudget += 4000; break;
            case TIKTOK:
                allocatedBudget += 3000; break;
            case TWITTER:
                allocatedBudget += 1000; break;
            default: break;
        }
        System.out.println("Bugetul difera in functie de platforma de social media utilizata pentru a lansa campania. " +
                         "Pentru campania curenta, platforma utilizata este " + socialMediaProfile.getPlatform() +
                         " deci bugetul alocat va fi " + allocatedBudget + ".");
end

// R19
rule "Increase budget by 500 for each allocated promoter."
    when
        promoter:Promoter(name == "DDD")
        promoter2:Promoter(name == "EEE")
        marketingStrategy:MarketingStrategy(allocatedBudget == 4500, promoters == List.of(promoter,promoter2))
        company:Company(marketingStrategies == List.of(marketingStrategy))
    then
        System.out.println("\n=====RULE 19=====");
        int promotersCount = marketingStrategy.getPromoters().size();
        int currentAllocatedBudget = marketingStrategy.getAllocatedBudget();
        int newAllocatedBudget = currentAllocatedBudget + (promotersCount * 500);
        marketingStrategy.setAllocatedBudget(newAllocatedBudget);

        System.out.printf("Pentru strategia curenta de marketing au fost alocati %d promoteri, deci bugetul va creste de la %d la %d.%n",
                        promotersCount, currentAllocatedBudget, newAllocatedBudget);
end

// R20
rule "Allocate budget depending on number of months in the campaign."
    when
        targetAudience:TargetAudience(ageInterval == AgeInterval.BETWEEN_30_AND_40)
        marketingStrategy:MarketingStrategy(targetAudience == targetAudience)
        company:Company(marketingStrategies == List.of(marketingStrategy))
    then
        System.out.println("\n=====RULE 20====");
        int allocatedBudget = 1500; // initial budget for operating costs
        LocalDate startDate = marketingStrategy.getCampaignStartDate().atZone(ZoneOffset.UTC).toLocalDate().withDayOfMonth(1);
        LocalDate endDate = marketingStrategy.getCampaignEndDate().atZone(ZoneOffset.UTC).toLocalDate().withDayOfMonth(1);
        int monthsBetween = (int) ChronoUnit.MONTHS.between(startDate, endDate);
        allocatedBudget = allocatedBudget + (monthsBetween * 1000);
        marketingStrategy.setAllocatedBudget(allocatedBudget);
        System.out.printf("Strategia curenta de marketing dureaza %d luni, deci bugetul alocat va fi %d.%n",
                            monthsBetween, allocatedBudget);
end